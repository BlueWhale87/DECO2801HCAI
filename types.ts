// Enum to manage the current view/phase of the user study.
// This is a common pattern for controlling the flow of a multi-step process.
export enum Phase {
  INTRODUCTION, // Initial welcome and consent screen
  CONDITION,    // Viewing the policy with one of the AI assistants
  SURVEY,       // Answering questions about the experience
  COMPARISON,   // Final preference questions
  RESULTS,      // Displaying the summary and data export option
}

// Defines the two conditions of the study: 'transparent' (AI explains reasoning)
// and 'opaque' (AI only provides a judgment).
export type ConditionType = 'transparent' | 'opaque';

// Interface for a single AI analysis of a policy clause.
export interface ClauseAnalysis {
  id: number; // Corresponds to the 'id' in a PolicyPart of type 'clause'
  type: 'concerning' | 'positive' | 'neutral'; // The AI's classification
  explanation: string; // The reasoning, shown only in the 'transparent' condition
}

// The structure for the AI's final conclusion, which will be dynamically generated by the Gemini API.
export interface AIConclusion {
  recommendation: 'agree' | 'disagree';
  summary: string;
  final_verdict: string;
}

// Represents a piece of the privacy policy document.
// Using a structured type like this allows for easy rendering of different elements (headings, paragraphs, etc.).
export interface PolicyPart {
  type: 'paragraph' | 'heading' | 'clause';
  content: string;
  id?: number; // Optional ID to link a 'clause' to its analysis
}

// A named set of policy content.
export interface PolicySet {
  name: string;
  content: PolicyPart[];
}

// A simple type for Likert scale scores, ensuring values are within the expected range.
export type LikertScore = 1 | 2 | 3 | 4 | 5;

// The structure for the answers from the post-condition survey.
export interface SurveyAnswers {
  scores: Record<string, LikertScore>; // A map of question text to the user's score
  comment: string; // Optional free-text feedback
}

// Defines the possible answers for the final preference questions.
export type FinalPreference = 'transparent' | 'opaque' | 'no_preference';

// The structure for the final comparison questions.
export interface FinalAnswers {
  preferred: FinalPreference;
  trustworthy: FinalPreference;
  reasoning: 'shows_reasoning' | 'just_decisions' | 'no_preference';
}

// The main data structure that aggregates all results for a single study participant.
// This object is what gets exported at the end of the study.
export interface StudyResults {
  participantId: string; // A unique identifier for the session
  policyName: string; // The name of the policy used for this session
  conditionOrder: ConditionType[]; // The randomized order in which conditions were shown
  transparentScores: SurveyAnswers | null; // Survey results for the transparent condition
  opaqueScores: SurveyAnswers | null; // Survey results for the opaque condition
  finalPreference: FinalAnswers | null; // Answers to the final comparison
  timestamps: Record<string, string>; // Timestamps for key events to measure duration
}